#!/usr/bin/env ruby

# all-ruby - runs various ruby with same command line.
#
# Copyright (C) 2009- Tanaka Akira  <akr@fsij.org>
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above
#     copyright notice, this list of conditions and the following
#     disclaimer in the documentation and/or other materials provided
#     with the distribution.
#  3. The name of the author may not be used to endorse or promote
#     products derived from this software without specific prior
#     written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
# OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
# GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
# EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

VERSION_WORD_NUMBER = {
  'ruby' => 0,
  'preview' => -2,
  'rc' => -1,
  'p' => 1,
  'a' => 1,
  'b' => 2,
  'c' => 3,
  'd' => 4,
  'repack' => 1,
}

def vercmp_key(n)
  return [] if /\A[0-9]/ !~ n
  ary = []
  n.scan(/(\d+)|[a-z]+/m) {
    if $1
      ary << $1.to_i
    else
      n = VERSION_WORD_NUMBER[$&]
      if n
        ary << n
      else
        warn "unexpected word: #{$&.inspect}"
      end
    end
  }
  10.times { ary << 0 }
  ary
end

def collect_commands
  commands = []
  if $opt_all_ruby_bins
    commands = $opt_all_ruby_bins
  else
    ENV['PATH'].split(/:/).each {|d|
      next if %r{\A/} !~ d
      begin
        Dir.foreach(d) {|n|
          next if /\Aruby-[0-9]/ !~ File.basename(n)
          next if commands.include? n
          bin = "#{d}/#{n}"
          if File.file?(bin) && File.executable?(bin)
            commands << n
          end
        }
      rescue Errno::ENOENT
        next
      end
    }
    all_ruby_bin = File.join(File.dirname(File.expand_path(File.realpath(__FILE__))), 'bin')
    if File.directory? all_ruby_bin
      Dir.foreach(all_ruby_bin) {|n|
        next if /\Aruby-[0-9]/ !~ File.basename(n)
        next if commands.include? n
        bin = "#{all_ruby_bin}/#{n}"
        next if commands.include? bin
        if File.file?(bin) && File.executable?(bin)
          commands << bin
        end
      }
    end
  end
  commands
end

def sort_by_name(commands)
  commands.sort_by {|n|
    vercmp_key(File.basename(n).sub(/\Aruby-/, ''))
  }
end

class Formatter
  def initialize(indent_len, title)
    @indent_len = indent_len
    @indent = ' ' * indent_len
    @title = title
    @beginning = true
    @after_newline = false
    @content = String.new
    @status = nil
  end
  attr_reader :content, :status

  def start
    print @title.ljust(@indent_len)
  end

  def output_data(s)
    return if s == ''
    @content << s
    s.each_line {|line|
      if @after_newline
        print @indent
        @after_newline = false
      end
      print line
      if /\n\z/ =~ line
        @after_newline = true
      end
    }
    @beginning = false
  end

  def show_status(status)
    if status.to_i != 0
      if !@beginning
        puts if !@after_newline
        print ' ' * (@indent_len-4)
      end
      puts status.inspect
      @after_newline = true
    end
  end

  def last_linebreak
    puts if !@after_newline
  end
end

class Squeezer
  def initialize(prev_sq, fmt)
    @prev_sq = prev_sq
    @fmt = fmt
    @shown = prev_sq.nil? || $opt_all_ruby_show_dup
    @content = String.new
    @status = nil
  end
  attr_reader :prev_sq, :content, :status, :shown

  def drop_prev
    @prev_sq = nil
  end

  def difference_found
    if @prev_sq
      @prev_sq.force_output
    end
    @shown = true
  end

  def start
    if @prev_sq &&
       @prev_sq.prev_sq &&
       @prev_sq.prev_sq.prev_sq
      if @prev_sq.prev_sq.prev_sq.shown &&
         !@prev_sq.prev_sq.shown &&
         !@prev_sq.shown
        puts '...'
      end
      @prev_sq.prev_sq.drop_prev
    end
    return @fmt.start if @shown
  end

  def output_data(s)
    @content << s
    return @fmt.output_data(s) if @shown
    return if @prev_sq.content.start_with? @content
    difference_found
    @fmt.start
    @fmt.output_data(@content)
  end

  def show_status(status)
    @status = status
    return @fmt.show_status(status) if @shown
    return if @prev_sq.status.to_i == status.to_i
    difference_found
    @fmt.start
    @fmt.output_data(@content)
    @fmt.show_status(@status)
  end

  def last_linebreak
    return @fmt.last_linebreak if @shown
  end

  def force_output
    return if @shown
    if @prev_sq &&
       @prev_sq.prev_sq &&
       @prev_sq.prev_sq.shown &&
       !@prev_sq.shown
      puts '...'
    end
    @shown = true
    @fmt.start
    @fmt.output_data(@content)
    @fmt.show_status(@status)
    @fmt.last_linebreak
  end
end

if ARGV.empty?
  puts <<"End"
usage: all-ruby RUBY-ARGS
environment variables:
  ALL_RUBY_SINCE=ruby-1.4
  ALL_RUBY_SHOW_DUP=yes
  ALL_RUBY_BINS='ruby-2.1.10 ruby-2.2.10 ruby-2.3.7 ruby-2.4.4 ruby-2.5.1'
  ALL_RUBY_ADDBINS=./ruby       space-separated binaries to be run
End
  exit
end

$opt_all_ruby_since = nil
if ENV['ALL_RUBY_SINCE']
  $opt_all_ruby_since = ENV['ALL_RUBY_SINCE']
end

$opt_all_ruby_show_dup = false
if ENV['ALL_RUBY_SHOW_DUP']
  $opt_all_ruby_show_dup = true
end

$opt_all_ruby_bins = nil
if ENV['ALL_RUBY_BINS']
  $opt_all_ruby_bins = ENV['ALL_RUBY_BINS'].split(/\s+/)
end

$opt_all_ruby_addbins = []
if ENV['ALL_RUBY_ADDBINS']
  $opt_all_ruby_addbins = ENV['ALL_RUBY_ADDBINS'].split(/\s+/)
end

#p __LINE__
commands = collect_commands
#p __LINE__
commands = sort_by_name(commands)

if $opt_all_ruby_since
  version_since = vercmp_key($opt_all_ruby_since.sub(/\Aruby-/, ''))
  commands.reject! {|n| (vercmp_key(File.basename(n).sub(/\Aruby-/, '')) <=> version_since) < 0 }
end

num_last_commands = 1
$opt_all_ruby_addbins.each {|bin|
  if File.file?(bin) && File.executable?(bin)
    commands << bin
    num_last_commands += 1
  end
}

if commands.empty?
  puts "no ruby versions found\n"
  exit false
end

titles = {}
titles_rev = {}
commands.each {|n|
  m = File.basename(n)
  if !titles_rev.has_key?(m)
    titles[n] = m
    titles_rev[m] = n
  else
    titles[n] = n
    titles_rev[n] = n
  end
}

title_len = commands.map {|n| titles[n].length }.max + 1
indent = ' ' * title_len

prev_sq = nil
commands.each_index {|i|
  n = commands[i]
  fmt = Formatter.new(title_len, titles[n])
  sq = Squeezer.new(prev_sq, fmt)
  sq.start
  r, w = IO.pipe
  pid = spawn({'RUBY'=>n}, [n, n], *ARGV, STDOUT=>w, STDERR=>w)
  w.close
  loop {
    begin
      s = r.readpartial(4096)
    rescue EOFError
      break
    end
    sq.output_data s
  }
  r.close
  Process.wait pid
  status = $?
  sq.show_status status
  sq.last_linebreak
  prev_sq = sq

  sq.force_output if commands.size - num_last_commands <= i
}
