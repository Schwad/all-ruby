#!/usr/bin/env ruby

# all-ruby - runs various ruby with same command line.
#
# Copyright (C) 2009- Tanaka Akira  <akr@fsij.org>
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above
#     copyright notice, this list of conditions and the following
#     disclaimer in the documentation and/or other materials provided
#     with the distribution.
#  3. The name of the author may not be used to endorse or promote
#     products derived from this software without specific prior
#     written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
# OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
# GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
# EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

require_relative 'lib/formatter'
require_relative 'lib/squeezer'
require_relative 'lib/ruby_version'

def find_commands(bins)
  commands = []
  all_ruby_bin = File.join(File.dirname(File.realpath(__FILE__)), 'bin')
  bins.each {|n|
    bin = "#{all_ruby_bin}/#{n}"
    if File.file?(bin) && File.executable?(bin)
      commands << bin
    else
      STDERR.puts "not found: #{bin}"
    end
  }
  commands.uniq
end

def collect_commands
  commands = []
  all_ruby_bin = File.join(File.dirname(File.realpath(__FILE__)), 'bin')
  Dir.foreach(all_ruby_bin) {|n|
    next if /\Aruby-[0-9]/ !~ File.basename(n)
    bin = "#{all_ruby_bin}/#{n}"
    if File.file?(bin) && File.executable?(bin)
      commands << bin
    end
  }
  commands.uniq
end

def sort_by_name(commands)
  commands.sort_by {|n|
    vercmp_key(File.basename(n).sub(/\Aruby-/, ''))
  }
end

if ARGV.empty?
  puts <<"End"
usage: all-ruby RUBY-ARGS
environment variables:
  ALL_RUBY_SINCE=ruby-1.4               run only versions since specified one
  ALL_RUBY_BINS='ruby-2.4.4 ruby-2.5.1' run only versions specfied
  ALL_RUBY_ADDBINS=./ruby               run specified commands additionaly
  ALL_RUBY_SHOW_DUP=yes                 don't suppress duplicated output
End
  exit
end

$opt_all_ruby_since = nil
if ENV['ALL_RUBY_SINCE']
  $opt_all_ruby_since = ENV['ALL_RUBY_SINCE']
end

$opt_all_ruby_show_dup = false
if ENV['ALL_RUBY_SHOW_DUP']
  $opt_all_ruby_show_dup = true
end

$opt_all_ruby_bins = nil
if ENV['ALL_RUBY_BINS']
  $opt_all_ruby_bins = ENV['ALL_RUBY_BINS'].split(/\s+/)
end

$opt_all_ruby_addbins = []
if ENV['ALL_RUBY_ADDBINS']
  $opt_all_ruby_addbins = ENV['ALL_RUBY_ADDBINS'].split(/\s+/)
end

#p __LINE__
commands = $opt_all_ruby_bins ?
  find_commands($opt_all_ruby_bins) :
  collect_commands
#p __LINE__
commands = sort_by_name(commands)

if $opt_all_ruby_since
  version_since = vercmp_key($opt_all_ruby_since.sub(/\Aruby-/, ''))
  commands.reject! {|n| (vercmp_key(File.basename(n).sub(/\Aruby-/, '')) <=> version_since) < 0 }
end

num_additional_commands = $opt_all_ruby_addbins.length
commands.concat $opt_all_ruby_addbins

if commands.empty?
  puts "no ruby versions found\n"
  exit false
end

titles = {}
titles_rev = {}
commands.each_with_index {|n, i|
  if commands.length - num_additional_commands <= i
    titles[n] = n
    titles_rev[n] = n
    next
  end
  m = File.basename(n)
  if !titles_rev.has_key?(m)
    titles[n] = m
    titles_rev[m] = n
  else
    titles[n] = n
    titles_rev[n] = n
  end
}

title_len = commands.map {|n| titles[n].length }.max + 1

prev_sq = nil
commands.each_index {|i|
  n = commands[i]
  fmt = Formatter.new(title_len, titles[n])
  sq = Squeezer.new(prev_sq, fmt)
  sq.start
  r, w = IO.pipe
  pid = spawn({'RUBY'=>n}, [n, n], *ARGV, STDOUT=>w, STDERR=>w)
  w.close
  loop {
    begin
      s = r.readpartial(4096)
    rescue EOFError
      break
    end
    sq.output_data s
  }
  r.close
  Process.wait pid
  status = $?
  sq.show_status status
  sq.last_linebreak
  prev_sq = sq

  sq.force_output if commands.size - (num_additional_commands+1) <= i
}
